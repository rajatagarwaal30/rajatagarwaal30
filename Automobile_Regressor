import os
os.getcwd()
import pandas as pd
df = pd.read_csv("Automobile_data.csv")
df.columns
df.isna().sum()
df.head(10)
def unique(columns):
    print(df[columns].unique())
unique('normalized-losses')
unique('stroke')
.
.
.

def clean_numerical(column):
    mean = df[df[column]!="?"][column].astype(float).mean()
    df[column] = df[column].str.replace("?", str(mean)).astype(float)
    return df

def clean_categorical(column):
    mean = df[df[column]!="?"][column].astype(str).mode()
    df[column] = df[column].str.replace("?", str(mean)).astype(str)
    return df

clean_numerical("normalized-losses")
clean_numerical("horsepower")
clean_categorical("stroke")
clean_categorical("bore")
clean_numerical("peak-rpm")
clean_numerical("price")

import numpy as np
numerical= df.select_dtypes(include=np.number)
categorical = df.select_dtypes(exclude=np.number)
numerical.head(5)

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
cols = list(numerical)
numerical = scaler.fit_transform(numerical)
numerical = pd.DataFrame(numerical,columns=cols)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt   
import seaborn as sns
%matplotlib inline
sns.pairplot(numerical)

categorical = pd.get_dummies(categorical)
categorical.head(10)
df=pd.concat([numerical,categorical],1)
df.head(5)

X=df.drop(['price'],1)
y=df['price']

from sklearn.model_selection import train_test_split as tts
X_train, X_test, y_train, y_test = tts(X, y, test_size=0.33, random_state=42)

## Feature Selection
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import r2_score,mean_squared_error,mean_absolute_error
from mlxtend.feature_selection import SequentialFeatureSelector as SFS

sfs=SFS(RandomForestRegressor(n_jobs=4),k_features=10,forward=True,floating=False,verbose=1,scoring='r2',cv=3)
sfs=sfs.fit(np.array(X_train.fillna(0)),y_train)
select_feat_forward= X_train.columns[list(sfs.k_feature_idx_)]
select_feat_forward

X_train = pd.DataFrame(data=X_train,columns=['length', 'engine-size', 'horsepower', 'highway-mpg', 'make_mazda',
       'make_mitsubishi', 'body-style_hardtop', 'drive-wheels_4wd',
       'num-of-cylinders_eight', 'fuel-system_spfi'])

X_test = pd.DataFrame(data=X_test,columns=['length', 'engine-size', 'horsepower', 'highway-mpg', 'make_mazda',
       'make_mitsubishi', 'body-style_hardtop', 'drive-wheels_4wd',
       'num-of-cylinders_eight', 'fuel-system_spfi'])

from sklearn.linear_model import Ridge
from sklearn.model_selection import cross_val_score
rr=Ridge(alpha=0.01)
rr.fit(X_train,y_train)
rr.score(X_test, y_test)

from sklearn.linear_model import RidgeCV
clf=RidgeCV()
clf = RidgeCV(alphas=[1e-3, 1e-2, 1e-1, 1]).fit(X, y)
clf.score(X,y)

from sklearn.linear_model import Lasso
ll=Lasso(alpha=0.01)
ll.fit(X_train,y_train)
ll.score(X_test,y_test)

from sklearn.linear_model import LassoCV
llf = LassoCV(alphas=[1e-3, 1e-2, 1e-1, 1]).fit(X, y)
llf.score(X,y)
from sklearn.linear_model import LinearRegression
lg=LinearRegression()
lg.fit(X_train,y_train)
lg.score(X_test,y_test)
